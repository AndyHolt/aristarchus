* Project progress, goals, scope, milestones
- [X] Set up SQLite database
- [X] Create Go app to provide abilities to add, modify, view and delete books
  from library (manually) -- CRUD
- [ ] Use prepared statements for database interaction where possible, to speed
  up a little. See [[https://go.dev/doc/database/prepared-statements][Using prepared statements]]. Ensure the interface ~DBInterface~
  properly accounts for the use of prepared statements in its methods, so as to
  ensure type robustness.
- [ ] Parallelise database lookup for speed, using Go routines (check how much
  it actually speeds up looking up a couple of hundred/thousand books, a good
  point to be raised in "Building Aristarchus" blog post). Would it be faster to
  just get all the rows from the database in one big move, then process them
  (parallelly?) in Go?
- [ ] Search interface
- [ ] Improve handling of book status: Remove status column from books table,
  add two more tables, one to store status values (owned, read, favourite, etc),
  and one to map from book_id to status_id, so that multiple status descriptions
  can be applied to a single book. Status attribute in book struct will need to
  become a list, listing the various status strings attached to the book.
- [ ] Add ratings(?) and notes for books
- [ ] Add column for edition description, as complement to edition number.
  - E.g. if edition is "revised and expanded edition", that can't be contained
    in an integer column. Create a separate database column for handling.
- [ ] Add books by ISBN or title/author and automatically fetch data
  - Try to use WorldCat for getting data. I think there is an API, but it may
    require registration?
- [ ] Provide API for dealing with data in JSON
- [ ] Perhaps add better (and customisable?) display of book details.
  - Make a type for edition number, with a stringer method to turn integer into
    a string, e.g. 1 -> "1st edition"
    - 1, 2, 3 require particular handling, then 4--10 all have "th" suffix. This
      repeats over all tens /except/ 11, 12, 13 which all have "th". This pattern
      then continues for every hundred. So a general method can be easily
      devised by testing modulo 10 and special cases for 11, 12 and 13.
- [ ] Create React frontend for interacting
- [ ] Consider how to use multiple users
- [ ] Add categories for books, allowing browsing in different categories
- [ ] Advanced search options for various fields
- [ ] ISBN handling
  - Check currently available packages for functionality
  - Create a type for ISBNs, which can accept any form of ISBN (10 or 13)
  - When assigning an ISBN, check it is valid by length, format, check digit,
    and whatever else can be used.
  - Store as simple string of digits (perhaps even an int?)
  - Stringer method include separation of elements (complex!)
  - Perhaps have  ability to scan a barcode?
* Issues and technical notes
- Currently using SQLite3 database, seems well suited to this as a personal
  project. But probably not suited to scaling to production, so will probably
  need to swap out to a MySQL or PostgreSQL database for deployment.
